diff --git a/config/src/config.rs b/config/src/config.rs
index a64be484..4b1a2a3d 100644
--- a/config/src/config.rs
+++ b/config/src/config.rs
@@ -683,6 +683,9 @@ pub struct Config {
     #[dynamic(default = "default_true")]
     pub adjust_window_size_when_changing_font_size: bool,
 
+    #[dynamic(default = "default_true")]
+    pub resolve_new_window_geometry_bounds_from_screens: bool,
+
     #[dynamic(default)]
     pub use_resize_increments: bool,
 
diff --git a/docs/config/lua/config/resolve_new_window_geometry_bounds_from_screens.md b/docs/config/lua/config/resolve_new_window_geometry_bounds_from_screens.md
new file mode 100644
index 00000000..39a51c7c
--- /dev/null
+++ b/docs/config/lua/config/resolve_new_window_geometry_bounds_from_screens.md
@@ -0,0 +1,8 @@
+# `resolve_new_window_geometry_bounds_from_screens = true`
+
+*Since 20230320-172200-12345678*
+
+Control whether window geometry bounds are calculated from screens. The default is true.
+
+If are experience slow window launches only when using multiple monitors on X11 then you
+may wish to set this to `false`.
diff --git a/window/src/connection.rs b/window/src/connection.rs
index 9564d499..c7d5b61d 100644
--- a/window/src/connection.rs
+++ b/window/src/connection.rs
@@ -82,29 +82,32 @@ pub trait ConnectionOps {
     }
 
     fn resolve_geometry(&self, geometry: RequestedWindowGeometry) -> ResolvedGeometry {
-        let bounds = match self.screens() {
-            Ok(screens) => {
-                log::trace!("{screens:?}");
-
-                match geometry.origin {
-                    GeometryOrigin::ScreenCoordinateSystem => screens.virtual_rect,
-                    GeometryOrigin::MainScreen => screens.main.rect,
-                    GeometryOrigin::ActiveScreen => screens.active.rect,
-                    GeometryOrigin::Named(name) => match screens.by_name.get(&name) {
-                        Some(info) => info.rect,
-                        None => {
-                            log::error!(
+        let bounds = match config::configuration().resolve_new_window_geometry_bounds_from_screens {
+            true => match self.screens() {
+                Ok(screens) => {
+                    log::trace!("{screens:?}");
+
+                    match geometry.origin {
+                        GeometryOrigin::ScreenCoordinateSystem => screens.virtual_rect,
+                        GeometryOrigin::MainScreen => screens.main.rect,
+                        GeometryOrigin::ActiveScreen => screens.active.rect,
+                        GeometryOrigin::Named(name) => match screens.by_name.get(&name) {
+                            Some(info) => info.rect,
+                            None => {
+                                log::error!(
                             "Requested display {} was not found; available displays are: {:?}. \
                              Using primary display instead",
                             name,
                             screens.by_name,
                         );
-                            screens.main.rect
-                        }
-                    },
+                                screens.main.rect
+                            }
+                        },
+                    }
                 }
-            }
-            Err(_) => euclid::rect(0, 0, 65535, 65535),
+                Err(_) => euclid::rect(0, 0, 65535, 65535),
+            },
+            false => euclid::rect(0, 0, 65535, 65535),
         };
 
         let dpi = self.default_dpi();
